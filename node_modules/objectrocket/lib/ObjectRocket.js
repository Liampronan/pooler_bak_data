var util = require('util');
var ProcessRequest = require('./ProcessRequest');

/**
* ObjectRocket class defined for exposing different APIs to the end user.
* @class ObjectRocket
**/
/**
* @property self
* @type Object This object preserves the reference of the instance.
**/

function ObjectRocket() {
    var self = this;
    self.className = "ObjectRocket";
    ObjectRocket.super_.call();
}
util.inherits(ObjectRocket, ProcessRequest);

/**
* Process the add request.
* @method add
* @param {Object} options The required parameters for processing the add request.
* @param {Function} callback The function to call after the add request processing is completed.
**/

ObjectRocket.prototype.add = function add(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the get request.
* @method get
* @param {Object} options The required parameters for processing the get request.
* @param {Function} callback The function to call after the get request processing is completed.
**/

ObjectRocket.prototype.get_data = function get_data(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the update request.
* @method update
* @param {Object} options The required parameters for processing the update request.
* @param {Function} callback The function to call after the update request processing is completed.
**/

ObjectRocket.prototype.update = function update(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the delete request.
* @method delete
* @param {Object} options The required parameters for processing the delete request.
* @param {Function} callback The function to call after the delete request processing is completed.
**/

ObjectRocket.prototype.delete_data = function delete_data(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the instance request.
* @method instance
* @param {Object} options The required parameters for processing the instance request.
* @param {Function} callback The function to call after the instance request processing is completed.
**/

ObjectRocket.prototype.instance = function instance(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the serverstatus request.
* @method serverstatus
* @param {Object} options The required parameters for processing the serverstatus request.
* @param {Function} callback The function to call after the serverstatus request processing is completed.
**/

ObjectRocket.prototype.serverstatus = function serverstatus(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the spaceusage request.
* @method spaceusage
* @param {Object} options The required parameters for processing the spaceusage request.
* @param {Function} callback The function to call after the spaceusage request processing is completed.
**/

ObjectRocket.prototype.spaceusage = function spaceusage(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the add_dbuser request.
* @method add_dbuser
* @param {Object} options The required parameters for processing the add_dbuser request.
* @param {Function} callback The function to call after the add_dbuser request processing is completed.
**/

ObjectRocket.prototype.add_dbuser = function add_dbuser(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the listdb request.
* @method listdb
* @param {Object} options The required parameters for processing the listdb request.
* @param {Function} callback The function to call after the listdb request processing is completed.
**/

ObjectRocket.prototype.listdb = function listdb(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the profiler request.
* @method profiler
* @param {Object} options The required parameters for processing the profiler request.
* @param {Function} callback The function to call after the profiler request processing is completed.
**/

ObjectRocket.prototype.profiler = function profiler(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the serverstatusplus request.
* @method serverstatusplus
* @param {Object} options The required parameters for processing the serverstatusplus request.
* @param {Function} callback The function to call after the serverstatusplus request processing is completed.
**/

ObjectRocket.prototype.serverstatusplus = function serverstatusplus(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the stats request.
* @method stats
* @param {Object} options The required parameters for processing the stats request.
* @param {Function} callback The function to call after the stats request processing is completed.
**/

ObjectRocket.prototype.stats = function stats(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the logs request.
* @method logs
* @param {Object} options The required parameters for processing the logs request.
* @param {Function} callback The function to call after the logs request processing is completed.
**/

ObjectRocket.prototype.logs = function logs(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the profiling_get request.
* @method profiling_get
* @param {Object} options The required parameters for processing the profiling_get request.
* @param {Function} callback The function to call after the profiling_get request processing is completed.
**/

ObjectRocket.prototype.profiling_get = function profiling_get(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the profiling_set request.
* @method profiling_set
* @param {Object} options The required parameters for processing the profiling_set request.
* @param {Function} callback The function to call after the profiling_set request processing is completed.
**/

ObjectRocket.prototype.profiling_set = function profiling_set(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the acl_get request.
* @method acl_get
* @param {Object} options The required parameters for processing the acl_get request.
* @param {Function} callback The function to call after the acl_get request processing is completed.
**/

ObjectRocket.prototype.acl_get = function acl_get(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the acl_add request.
* @method acl_add
* @param {Object} options The required parameters for processing the acl_add request.
* @param {Function} callback The function to call after the acl_add request processing is completed.
**/

ObjectRocket.prototype.acl_add = function acl_add(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

/**
* Process the acl_delete request.
* @method acl_delete
* @param {Object} options The required parameters for processing the acl_delete request.
* @param {Function} callback The function to call after the acl_delete request processing is completed.
**/

ObjectRocket.prototype.acl_delete = function acl_delete(options, callback) {
    var self = this;
    return self.makeRequest(options, callback);
}

var API_Request = new ObjectRocket();
module.exports = API_Request;
